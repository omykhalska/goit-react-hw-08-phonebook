{"version":3,"file":"static/js/57.a769371c.chunk.js","mappings":"qLAEaA,E,QAAUC,EAAAA,EAAH,qFAGT,SAAAC,GAAK,OAAIA,EAAMC,S,UCO1B,EAToB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASD,MAAAA,OAAT,MAAiB,UAAjB,SAClB,SAACH,EAAD,CAASG,MAAOA,EAAhB,SAAwBC,M,kLCFbC,EAAUJ,EAAAA,EAAAA,IAAH,mTAcPK,EAAOL,EAAAA,EAAAA,EAAH,iFAMJM,EAAON,EAAAA,EAAAA,KAAH,6DAKJO,EAAQP,EAAAA,EAAAA,MAAH,uGAOLQ,EAAQR,EAAAA,EAAAA,MAAH,ujBAkBLS,EAAYT,EAAAA,EAAAA,OAAH,8kBAqBTU,EAAUV,EAAAA,EAAAA,IAAH,qHAQPW,EAAeX,EAAAA,EAAAA,EAAH,mE,UC7DnBY,EAASC,EAAAA,GACL,CACNC,KAAMD,EAAAA,KAEHE,SAAS,qCACTC,QARW,6CAUV,yJAEDC,IAAI,GACPC,MAAOL,EAAAA,KAEJK,MAAM,qCACNH,SAAS,qCACZI,SAAUN,EAAAA,KAEPE,SAAS,qCACTC,QAnBkB,kCAqBjB,+FAGLD,WAEUK,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYb,GACtBc,KAAM,cANNC,EADF,EACEA,SACaC,EAFf,EAEEC,UAAaD,OACbE,EAHF,EAGEA,aACAC,EAJF,EAIEA,MAWIC,EAAY,WAAO,IAAD,EACtB,OACE,iCACE,UAACzB,EAAD,mBAEE,SAACC,GAAD,QAAOyB,KAAK,OAAOC,YAAY,QAAWP,EAAS,cAErD,SAAChB,EAAD,oBAAeiB,EAAOd,YAAtB,aAAe,EAAaqB,cAK5BC,EAAa,WAAO,IAAD,EACvB,OACE,iCACE,UAAC7B,EAAD,oBAEE,SAACC,GAAD,QACEyB,KAAK,QACLnB,KAAK,QACLoB,YAAY,SACRP,EAAS,eAGjB,SAAChB,EAAD,oBAAeiB,EAAOV,aAAtB,aAAe,EAAciB,cAK7BE,EAAgB,WAAO,IAAD,EAC1B,OACE,iCACE,UAAC9B,EAAD,uBAEE,SAACC,GAAD,QACEyB,KAAK,WACLnB,KAAK,WACLoB,YAAY,kBACRP,EAAS,kBAGjB,SAAChB,EAAD,oBAAeiB,EAAOT,gBAAtB,aAAe,EAAiBgB,cAKtC,OACE,UAAC/B,EAAD,YACE,SAACC,EAAD,oDACA,UAACC,EAAD,CAAMQ,KAAK,gBAAgBwB,SAAUR,GAtDxB,SAAAS,GACflB,EAASmB,EAAAA,GAAAA,SAAwBD,IACjCR,OAoDE,WACE,SAACC,EAAD,KACA,SAACI,EAAD,KACA,SAACC,EAAD,KACA,SAAC5B,EAAD,CAAWwB,KAAK,SAAhB,0BAEF,UAACvB,EAAD,uCAEE,SAAC,KAAD,CAAS+B,GAAG,SAAZ,4B,UClHKC,EAAe,WAG1B,OAFgBC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,aAG1B,iCACE,SAACC,EAAA,EAAD,CACE1C,KAAM,wDACND,MAAO,SAET,SAACkB,EAAD,QAGF,SAACA,EAAD","sources":["components/HeadMessage/HeadMessage.styled.jsx","components/HeadMessage/HeadMessage.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Message = styled.p`\n  margin: 0 0 16px 0;\n  text-align: center;\n  color: ${props => props.color};\n`;\n","import PropTypes from 'prop-types';\nimport { Message } from './HeadMessage.styled';\n\nconst HeadMessage = ({ text, color = 'inherit' }) => (\n  <Message color={color}>{text}</Message>\n);\n\nHeadMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string,\n};\n\nexport default HeadMessage;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  margin: 0 auto;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  max-width: 600px;\n  background: white;\n  border-radius: 4px;\n  box-shadow: rgba(60, 66, 87, 0.12) 0px 7px 14px 0px,\n    rgba(0, 0, 0, 0.12) 0px 3px 6px 0px;\n`;\n\nexport const Text = styled.p`\n  margin: 8px 0;\n  font-size: 20px;\n  color: #121779;\n`;\n\nexport const Form = styled.form`\n  width: 100%;\n  max-width: 448px;\n`;\n\nexport const Label = styled.label`\n  font-size: 16px;\n  font-weight: 600;\n  display: block;\n  color: #121779;\n`;\n\nexport const Input = styled.input`\n  margin-top: 10px;\n  margin-bottom: 20px;\n  font-size: 16px;\n  line-height: 28px;\n  padding: 8px 16px;\n  width: 100%;\n  min-height: 44px;\n  border: unset;\n  border-radius: 4px;\n  outline-color: rgb(84 105 212 / 0.5);\n  background-color: rgb(255, 255, 255);\n  box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px,\n    rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(60, 66, 87, 0.16) 0px 0px 0px 1px,\n    rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px,\n    rgba(0, 0, 0, 0) 0px 0px 0px 0px;\n`;\n\nexport const SubmitBtn = styled.button`\n  background-color: #2878ad;\n  border: unset;\n  border-radius: 4px;\n  outline-color: rgb(84 105 212 / 0.5);\n  box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px,\n    rgba(0, 0, 0, 0.12) 0px 1px 1px 0px, rgb(40, 120, 173) 0px 0px 0px 1px,\n    rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px,\n    rgba(60, 66, 87, 0.08) 0px 2px 5px 0px;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: 600;\n  width: 100%;\n  min-height: 44px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #1565c0;\n  }\n`;\n\nexport const Flexbox = styled.nav`\n  margin: 8px 0;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  color: #121779;\n`;\n\nexport const ErrorMessage = styled.p`\n  margin: -10px 0 10px;\n  color: tomato;\n`;\n","import { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth';\nimport { NavLink } from 'react-router-dom';\nimport {\n  Wrapper,\n  Form,\n  Text,\n  Label,\n  Input,\n  SubmitBtn,\n  Flexbox,\n  ErrorMessage,\n} from './RegisterForm.styled';\n\nconst NAME_PATTERN = `^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$`;\nconst PASSWORD_PATTERN = '^(?=.*[0-9])(?=.*[A-Z]).{7,32}$';\n\nconst schema = yup\n  .object({\n    name: yup\n      .string()\n      .required('❌ The field cannot be empty!')\n      .matches(\n        NAME_PATTERN,\n        '❌ Name may contain only alphanumerics, at least 3 characters. The dot (.), underscore (_), or hyphen (-) must not be the first or last character'\n      )\n      .min(2),\n    email: yup\n      .string()\n      .email('❌Email must be a valid email')\n      .required('❌ The field cannot be empty!'),\n    password: yup\n      .string()\n      .required('❌ The field cannot be empty!')\n      .matches(\n        PASSWORD_PATTERN,\n        '❌ The password must be at least 7 characters long with one digital and one uppercase'\n      ),\n  })\n  .required();\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onTouched',\n  });\n\n  const onSubmit = data => {\n    dispatch(authOperations.register(data));\n    reset();\n  };\n\n  const NameInput = () => {\n    return (\n      <>\n        <Label>\n          Name\n          <Input type=\"text\" placeholder=\"Name\" {...register('name')} />\n        </Label>\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n      </>\n    );\n  };\n\n  const EmailInput = () => {\n    return (\n      <>\n        <Label>\n          Email\n          <Input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            {...register('email')}\n          />\n        </Label>\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n      </>\n    );\n  };\n\n  const PasswordInput = () => {\n    return (\n      <>\n        <Label>\n          Password\n          <Input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Enter password\"\n            {...register('password')}\n          />\n        </Label>\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n      </>\n    );\n  };\n\n  return (\n    <Wrapper>\n      <Text>Don't have an account? Register one!</Text>\n      <Form name=\"register-form\" onSubmit={handleSubmit(onSubmit)}>\n        <NameInput />\n        <EmailInput />\n        <PasswordInput />\n        <SubmitBtn type=\"submit\">Register</SubmitBtn>\n      </Form>\n      <Flexbox>\n        Already have an account?\n        <NavLink to=\"/login\">Sign In</NavLink>\n      </Flexbox>\n    </Wrapper>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm';\nimport HeadMessage from 'components/HeadMessage';\nimport { authSelectors } from 'redux/auth';\nimport { useSelector } from 'react-redux';\n\nexport const RegisterPage = () => {\n  const isError = useSelector(authSelectors.getIsError);\n\n  return isError ? (\n    <>\n      <HeadMessage\n        text={'Something went wrong... Try again with another email!'}\n        color={'red'}\n      />\n      <RegisterForm />\n    </>\n  ) : (\n    <RegisterForm />\n  );\n};\n"],"names":["Message","styled","props","color","text","Wrapper","Text","Form","Label","Input","SubmitBtn","Flexbox","ErrorMessage","schema","yup","name","required","matches","min","email","password","RegisterForm","dispatch","useDispatch","useForm","resolver","yupResolver","mode","register","errors","formState","handleSubmit","reset","NameInput","type","placeholder","message","EmailInput","PasswordInput","onSubmit","data","authOperations","to","RegisterPage","useSelector","authSelectors","HeadMessage"],"sourceRoot":""}